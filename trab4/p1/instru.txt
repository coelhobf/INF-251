ALU
//r1 = r1 + r1
//add r1, r1, r1
0 1 1 1 0 32
0000 0000 0010 0001 0000 1000 0010 0000
0x00210820

ADDI
//r4 = zero + 10
//addi r4, zero, 10
8 0 4 10
0010 0000 0000 0100 0000 0000 0000 1010
0x2004000a

//r2 = r1 + 8
//addi r2, r1, 8
8 1 2 8
0010 0000 0010 0010 0000 0000 0000 1000
0x20220008

JUMP
//jump 100
2 100
0000 1000 0000 0000 0000 0000 1100 0100
0x080000c4

//jump 6
2 6
0000 1000 0000 0000 0000 0000 0000 0110
0x08000006

BEQ
//if (r2 = r4) jump -4
//beq r2, r4, -4
4 4 2 -4
0001 0000 1000 0010 1111 1111 1111 1100
0x1082fffc

SW
//Mem(5) = r1;
//sw r1, 5(zero)
43 0 1 5
1010 1100 0000 0001 0000 0000 0000 0101
0xac010005

LW
//r3 = Mem(r5+0);
//lw r3, 0(r5)
35 5 3 0
1000 1100 1010 0011 0000 0000 0000 0000
0x8ca30000

Situação do código:
add r1, r1, r1 --> r1 = 2
addi r4, zero, 10 --> r4 = 10
addi r2, r1, 8 --> r2 = r1 + 8 = 10
beq r2, r4, -4 --> if(r2==r4) volta 4 instuções
jump 24 --> pula pra 6 instrução (ignora a proxima)
jump 100 --> pula pra centésima instrução (não existe)
sw r1, 5(zero) --> Mem(5) = r1 = 4
lw r3, 0(r5) --> r3 = Mem(5) = 4